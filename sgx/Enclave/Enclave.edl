/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

 /* EDL = Enclave Definition Language */

/* Enclave.edl - Top EDL file. */

enclave {
    /* from "sgx_tae_service.edl" import *; */

    include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    
    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;

    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;


    /* define ECALLs here. */
    trusted {
    	public void ecall_initialize_enclave(int isDebug, int isBenchmark);
        public int ecall_setup_device_info([in, string] char *str);

        public int ecall_get_num_mqtt_subscription_topic();
        public int ecall_get_mqtt_topics([in, out, count=count] struct Message* msg, size_t count);

    	public int ecall_did_receive_rule([user_check] struct Message* msg);
    	public void ecall_did_receive_event_mqtt([user_check] struct Message* msg);

        public void ecall_print_statistics();
        public int ecall_get_stat_num_rule_conflicts();
        public int ecall_get_stat_num_rule_retrieved();
        public int ecall_get_stat_num_device_commands();

    };


    /*
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);

        size_t ocall_write_to_file([user_check] struct DatabaseElement *element, int count);

        size_t ocall_read_rule_count([in, string] char *pk, [in, string] char *sk, size_t queryType);
        size_t ocall_read_rule_info([in, string] char *pk, [in, string] char *sk, size_t queryType, [in, out, count=count] int* rule_size_list, size_t count);
        size_t ocall_read_rule([in, string] char *pk, [in, string] char *sk, size_t queryType, [in, out, count=count] struct Message *data, size_t count);

        size_t ocall_send_rule_commands_mqtt([in, string] char *topic, [in, string] char *actionCommand, int commandLength);

        size_t ocall_get_current_time(int timeUnit);
    };
};
